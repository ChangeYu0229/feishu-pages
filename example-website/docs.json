[
  {
    "depth": 0,
    "title": "简体中文",
    "node_token": "PRqjwjB4EiQbiEk5fxVc99BZnzg",
    "parent_node_token": "",
    "obj_create_time": "1697445178",
    "obj_edit_time": "1697445192",
    "obj_token": "LmzFdNtLQok47MxMUagc2o9SnXc",
    "children": [
      {
        "depth": 1,
        "title": "快速开始",
        "node_token": "XpKYwA6oqiGMfFkLVwCcwykunzV",
        "parent_node_token": "PRqjwjB4EiQbiEk5fxVc99BZnzg",
        "obj_create_time": "1693452885",
        "obj_edit_time": "1697445249",
        "obj_token": "Fkoed2dB5ofvJbxSmZbcWMBhnQd",
        "children": [],
        "has_child": false,
        "content": "# 快速开始\n\n<div class=\"callout callout-bg-4 callout-border-4 callout-color-4\">\n🎉 This site build by GitHub Actions with feishu-pages.\n</div>\n\n<img src=\"DkwibdF3ooVi0KxttdocdoQ5nPh\" src-width=\"400\" src-height=\"354\" align=\"center\"/>\n\n导出**飞书知识库**，并按相同目录结构生成 [Static Page Generator](https://www.google.com/search?q=Static+Page+Generator) 支持 Markdown 文件组织方式，用于发布为静态网站。\n\n内容格式支持：[Content Examples](Ks7jwPEtJiyUXckawcRcJ68jnvg) [直接连接](https://longbridge.feishu.cn/wiki/Ks7jwPEtJiyUXckawcRcJ68jnvg)\n\n## **Features**\n\n- [feishu-docx](https://github.com/longbridgeapp/feishu-pages/tree/main/feishu-docx) - 支持将飞书新版文档 Docx 转换为 Markdown 或其他格式（_目前只支持 Markdown_）\n- 目录结构组织\n- 图片下载\n- 与 GitHub Actions 结合\n- 生成支持 [Docusaurus](https://docusaurus.io/) 支持的 Markdown 格式，以实现目录结构组织（基于 `sidebar_position`）\n    - 例如: VitePress 的使用：[VitePress](VNNZwWEHTiojJVka343c1lrunsf) \n\n## **Installation**\n\nFeishu Pages 可以以 Npm 的方式引入到 Static Page Generator 的项目中。\n\n例如我们有一个 [Docusaurus](https://docusaurus.io/) 的静态页面网站项目。\n\n```bash\ncd your-project/\nyarn add feishu-pages\n```\n\n然后你就可以执行 `yarn feishu-pages` 来生成页面了。\n\n## **Feishu Permissions**\n\n- `docx:document:readonly`\n- `wiki:wiki:readonly`\n- `drive:drive:readonly`\n\n## **Configuration**\n\n|Name|Description|Required|Default|\n|---|---|---|---|\n|FEISHU_APP_ID|飞书应用 ID|YES||\n|FEISHU_APP_SECRET|飞书应用 Secret|YES||\n|FEISHU_SPACE_ID|飞书知识库 ID|YES||\n|ASSET_BASE_URL|资源文件（图片、附件）的 Base URL，通过这个配置配置 img src 的 URL 前缀||/assets|\n|OUTPUT_DIR|输出目录||./dist|\n\n## **Usage**\n\n### **创建飞书应用并开通权限**\n\n1. 请访问 [https://open.feishu.cn/app](https://open.feishu.cn/app) 创建一个新应用，并获得：\n    - `App ``ID`\n    - `App Secret` - 请注意保管 App Secret，不要泄露到互联网。\n\n2. 为应用开启 `机器人` 应用能力。\n3. 为应用开启 `docx:document:readonly` 和 `wiki:wiki:readonly` 权限。\n4. 将应用发布正式版本，并确保审批通过。\n5. 在飞书 IM 中创建新群 `Feishu Pages`，将应用添加为该群机器人，知识库管理员在「知识空间设置」-> 「权限设置」->「添加管理员」中添加，把这个 `Feishu Pages` 群加成 **管理员**。\n    - 否则会遇到 `permission denied: wiki space permission denied` 错误。 [ref](https://open.feishu.cn/document/server-docs/docs/wiki-v2/wiki-qa)\n\n### **获取飞书知识库 ****space_id**\n\n我们需要配置 `FEISHU_SPACE_ID` 的环境变量，这个为飞书知识库的 `space_id`，你可以访问知识库设置界面，从 URL 中获取。\n\n例如：`https://your-company.feishu.cn/wiki/settings/6992046856314306562` 这里面 `6992046856314306562` 为 `space_id`。\n\n### **环境变量配置**\n\nFeishu Pages 支持 `.env` 文件，如果执行的根目录有个 `.env` 文件，将会自动读取。\n\n> 请参考 `.env.default` 配置环境变量。\n\n如需在 GitHub Actions 的 CI 流程里面使用，建议添加到 Secrets 中，再通过环境变量的方式获取。\n\n## **从知识库导出 Markdown 文档**\n\n```bash\ncd your-project/\nyarn feishu-pages\n```\n\n按上面默认的配置，最终会在 `./dist` 目录下生成 Markdown 文件以及导出的图片文件，如果你期望调整目录，可以自己设置 `OUTPUT_DIR` 环境变量。\n\n## **常见问题**\n\n### **Rate Limit 相关错误**\n\n> Error: request trigger frequency limit\n\n飞书 API 有总每分钟 100 次请求的[总频率限制](https://open.feishu.cn/document/ukTMukTMukTM/uUzN04SN3QjL1cDN)，这个项目实现的时候为每个请求之前做了 300ms 的延迟，以避免超过这个频率。如有遇到此类问题，请提交 Issue。\n\n## **License**\n\nMIT\n\n",
        "meta": {
          "slug": "gettting-started",
          "hide": true
        },
        "fileTokens": {
          "DkwibdF3ooVi0KxttdocdoQ5nPh": {
            "token": "DkwibdF3ooVi0KxttdocdoQ5nPh",
            "type": "image"
          }
        },
        "slug": "zh-CN/gettting-started",
        "position": 0,
        "filename": "zh-CN/gettting-started.md"
      },
      {
        "depth": 1,
        "title": "支持的内容格式",
        "node_token": "Ks7jwPEtJiyUXckawcRcJ68jnvg",
        "parent_node_token": "PRqjwjB4EiQbiEk5fxVc99BZnzg",
        "obj_create_time": "1695107050",
        "obj_edit_time": "1697445257",
        "obj_token": "Z1dpdj9Y5o0IEex5fecc529qnwc",
        "children": [],
        "has_child": false,
        "content": "# 支持的内容格式\n\n本文用于演示当前 feishu-docx 导出后能完美支持的格式，在下面列出的均可以有较好的支持。\n\n由于 Feishu OpenAPI 数据给出有限，feishu-docx 导出并不能 100% 还原在飞书文档里面的格式，实际可以达到 99% 的效果。\n\n**已知不支持格式：**\n\n- 多维表格 - 飞书多维表格（电子表格）是独立的数据，且数据格式庞大复杂，暂时不支持，请编写文档的时候使用**普通表格**。\n- 流程图 / UML 图 / 画板 / 思维导图 - 以上几种为飞书文档的子应用功能，目前对接的飞书文档未给出此类数据或图片，所以无法实现。\n- 图片尺寸、裁剪 - 图片将以原图的方式输出，由于飞书 OpenAPI 未给出图片的裁剪和缩放尺寸信息，所以导出内容不含宽度、高度，这项可以依据最终页面的设定图片 100% 宽度来实现。\n- 公式 - 暂未支持，这个后面可能会支持。\n- 其他飞书三方组件 - 这个无法支持，API 未提供数据。\n- 文字颜色 - 文字的前景色、背景色，考虑到 Markdown 输出，暂时未做支持。\n\n基于以上，建议在飞书侧编写文档的时候，尽量采用支持的格式，目前已经支持的格式能满足文档撰写（如帮助文档、博客）等场景的文档格式需要。\n\n---\n\n# 下面是完整格式演示\n\n## This is heading 2\n\n### This is heading 3\n\n#### This is heading 4\n\n##### This is heading 5\n\n###### This is heading 6\n\n> This is a block quote.\n> With a new line.\n\n## Paragraph\n\n导出飞书知识库，并按相同目录结构生成 [Static Page Generator](https://www.google.com/search?q=Static+Page+Generator) 支持 `Markdown` 文件组织方式，用于发布为**静态网站**。\n\nGenerate **Feishu Wiki** into a Markdown for work with Static Page Generators.\n\n## Callout\n\n<div class=\"callout callout-bg-1 callout-border-1 callout-color-1\">\n Red Callout\n</div>\n\n<div class=\"callout callout-bg-2 callout-border-2 callout-color-2\">\n💡 Orange Callout\n</div>\n\n<div class=\"callout callout-bg-3 callout-border-3 callout-color-3\">\n🤖 Yellow Callout\n</div>\n\n<div class=\"callout callout-bg-4 callout-border-4 callout-color-4\">\n✅ Green Callout\n</div>\n\n<div class=\"callout callout-bg-5 callout-border-5 callout-color-5\">\n🐳 Blue Callout\n</div>\n\n<div class=\"callout callout-bg-6 callout-border-6 callout-color-6\">\n🐳 Purple Callout\n</div>\n\n<div class=\"callout callout-bg-14 callout-border-7 callout-color-7\">\n🐼 Gray Callout\n</div>\n\n## Grid\n\nHere is a 3 column grid example:\n\n<div class=\"grid gap-3 grid-cols-4\">\n<div>\n</div>\n<div>\n</div>\n<div>\n</div>\n<div>\n</div>\n</div>\n\n<div class=\"grid gap-3 grid-cols-3\">\n<div>\n<img src=\"YeddbLtaMoHapoxEZymcDrabnqh\" src-width=\"440\" src-height=\"440\" align=\"center\"/>\n</div>\n<div>\n<img src=\"L1VubkGDpofxhpxY8SUcwUvwnqd\" src-width=\"440\" src-height=\"440\" align=\"center\"/>\n</div>\n<div>\n<img src=\"DKBAbJgPSoDMEsxtj4HcmGUdnQb\" src-width=\"440\" src-height=\"440\" align=\"center\"/>\n</div>\n</div>\n\n## Bullet List\n\n- Projects\n    - GitHub\n    - Twitter\n        - x.com\n    - Facebook \n\n- OpenSource\n    - feishu-pages\n    - feishu-docx\n\n## Ordered List\n\n1. This is 1 item\n    1. This is a item\n        1. This is i \n    2. This is b\n    3. This c\n\n2. This is 2 item\n    1. This is 2.1\n    2. This is 2.2\n\n## CodeBlock\n\nA JSON example:\n\n```json\n{\n  \"name\": \"feishu-pages\",\n}\n```\n\nA TypeScript example:\n\n```ts\nconst name = \"feishu-pages\";\n```\n\n## TODO\n\n- [x] This item is completed\n\n- [ ] This is imcomplete\n\n## Divider\n\nThere is a divider\n\n---\n\nTo split contents.\n\n## Image\n\nAn example of an image with caption.\n\n<img src=\"AOilbSy20oC6Wlx8qtUc9ok5nLb\" src-width=\"1400\" src-height=\"700\" align=\"center\"/>\n\n## File\n\n[test-file.zip](My5Eb1cYkoXmQwxU5eLcwGhCnic)\n\n## Table\n\nCurrently, feishu-docx only supports pure Table.\n\n|Name|Type|Website|\n|---|---|---|\n|GitHub|Programming|https://github.com|\n|Twitter|Social Network|https://x.com|\n|Dribbble|Design|https://dribbble.com|\n\n",
        "meta": {
          "slug": "supported-formats"
        },
        "fileTokens": {
          "YeddbLtaMoHapoxEZymcDrabnqh": {
            "token": "YeddbLtaMoHapoxEZymcDrabnqh",
            "type": "image"
          },
          "L1VubkGDpofxhpxY8SUcwUvwnqd": {
            "token": "L1VubkGDpofxhpxY8SUcwUvwnqd",
            "type": "image"
          },
          "DKBAbJgPSoDMEsxtj4HcmGUdnQb": {
            "token": "DKBAbJgPSoDMEsxtj4HcmGUdnQb",
            "type": "image"
          },
          "AOilbSy20oC6Wlx8qtUc9ok5nLb": {
            "token": "AOilbSy20oC6Wlx8qtUc9ok5nLb",
            "type": "image"
          },
          "My5Eb1cYkoXmQwxU5eLcwGhCnic": {
            "token": "My5Eb1cYkoXmQwxU5eLcwGhCnic",
            "type": "file"
          }
        },
        "slug": "zh-CN/supported-formats",
        "position": 1,
        "filename": "zh-CN/supported-formats.md"
      },
      {
        "depth": 1,
        "title": "Page Mata",
        "node_token": "J1o5w2l0NiV8tekJvXycfkkengb",
        "parent_node_token": "PRqjwjB4EiQbiEk5fxVc99BZnzg",
        "obj_create_time": "1695371991",
        "obj_edit_time": "1697445691",
        "obj_token": "U8WHddPnAoDUXgxRD9kciSBan6e",
        "children": [],
        "has_child": false,
        "content": "# Page Mata\n\n对于 Web 页面发布的场景，我们可能期望能控制最终页面的 URL。\n\n飞书知识库的默认功能并未给我们提供一些特殊的描述字段用于定义页面 URL 之类的信息。因此我们需要采用一个特殊的方法来实现这个描述。\n\n## 语法格式\n\nPage Meta 是 feishu-pages 项目里面的一个特殊描述信息，你可以在飞书文档第一段插入一个 `CodeBlock` 并采用 `YAML`或`JSON`的语言格式。\n\n最终页面导出的时候 feishu-pages 工具将会识别这个 `CodeBlock` 里面的内容，用来作为这一页的描述（或者是配置信息）信息。\n\n|   |   |   |\n|---|---|---|\n|字段|类型|说明|\n|slug|string|用来定义页面的 URL 文件名。<br/>例如：`hello-world`<br/>这样，最终的 URL 地址可能会是这样：<br/>`https://your-site.com/path/of/folder/`**hello-world**<br/>> `path/of/folder` 是左侧目录树的层次|\n|hide|bool|隐藏此页，如果为 `true` 当前页面以及它的子页面在生成最终 Page 的时候将会被忽略，目录树里面也不会有。<br/>默认值：`false`|\n\n如果是采用 `YAML` 格式，编写 Page Meta 部分类似这样：\n\n```yaml\nslug: your-page-slug\nhide: false\n```\n\n你也可以采用 `JSON` 格式，效果是一样的：\n\n```json\n{\n  \"slug\": \"your-page-slug\"\n}\n```\n\n当我们完成 Page 生成以后，Page Meta 将会被隐藏掉，不会在最终的网页上显示出来。\n\n## 例如\n\n下面这是一个飞书文档上配置了 Page Meta 的截图举例，添加了 Page Meta 页面看起来可能是这样的：\n\n<img src=\"DnxObTWWbo2hwOxVgXvcGiM9nTg\" src-width=\"1750\" src-height=\"704\" align=\"center\"/>\n\n",
        "meta": {
          "slug": "page-meta"
        },
        "fileTokens": {
          "DnxObTWWbo2hwOxVgXvcGiM9nTg": {
            "token": "DnxObTWWbo2hwOxVgXvcGiM9nTg",
            "type": "image"
          }
        },
        "slug": "zh-CN/page-meta",
        "position": 2,
        "filename": "zh-CN/page-meta.md"
      },
      {
        "depth": 1,
        "title": "国际化",
        "node_token": "VAAJwfYDLigGtGkyD1ScLM9mnQb",
        "parent_node_token": "PRqjwjB4EiQbiEk5fxVc99BZnzg",
        "obj_create_time": "1697447944",
        "obj_edit_time": "1697450304",
        "obj_token": "R7BndHaGGowMilx3zUHc068Bngc",
        "children": [],
        "has_child": false,
        "content": "# 国际化\n\n飞书文档以及飞书知识库本身不支持国际化功能，我们无法为同一篇文档添加不同语言的翻译版本。\n\n因此我们需要一些特别的机制来实现在 feishu-pages 的流程中，为我们的项目实现国际化支持。\n\n## 目录结构\n\n你需要在飞书知识库里面将多个语言放在一起，并把不同的语言放入不同的根节点。\n\n根据需要，在根目录创建 简体中文、繁体中文、English 等需要的国际化版本，并将这几个文件增加 [Page Mata](J1o5w2l0NiV8tekJvXycfkkengb) 定义好基本的 slug，然后分别将不同语言的内容放入其下。\n\n目录结构需要构建成类似这样（括号里面的是 Page Meta 信息）：\n\n```yaml\n简体中文 (slug: zh-CN)\n    快速开始\n    支持的内容格式\n    ...\nEnglish (slug: en)\n    Getting Started\n    Support Formats\n    ...\n```\n\n飞书知识库的目录大概是这样：\n\n<img src=\"P9tcbRYsgo2fAwx7Y48clxP0nYk\" src-width=\"676\" src-height=\"1148\" align=\"center\"/>\n\n## Static Page Generator 配置\n\n通过上面的方式，feishu-pages 导出 Markdown 文件以后，你将获得这样的文件结构：\n\n```yaml\n├── en\n│   ├── assets\n│   │   ├── ABxwbknVxoL2c4xjgrVcMgDWnOh.png\n│   ├── feishu-docx.md\n│   ├── gettting-started.md\n│   ├── intergration-deploy\n│   │   ├── github-actions.md\n│   │   └── gitlab-ci.md\n│   ├── intergration-deploy.md\n│   ├── page-meta.md\n│   ├── static-page\n│   │   └── vite-press.md\n│   ├── static-page.md\n│   └── supported-formats.md\n├── en.md\n├── zh-CN\n│   ├── assets\n│   │   ├── AOilbSy20oC6Wlx8qtUc9ok5nLb.png\n│   ├── feishu-docx.md\n│   ├── gettting-started.md\n│   ├── intergration-deploy\n│   │   ├── github-actions.md\n│   │   └── gitlab-ci.md\n│   ├── intergration-deploy.md\n│   ├── page-meta.md\n│   ├── static-page\n│   │   └── vite-press.md\n│   ├── static-page.md\n│   └── supported-formats.md\n└── zh-CN.md\n```\n\n可以从上面的结构看到，`zh-CN` 与 `en` 分别放入了不同的文件。\n\n同时 feishu-pages 生成的 `docs.json` 文件也有这样的目录树结构，你如果想获取 `zh-CN` 或 `en` 不分，可以通过 JavaScript 的遍历来找到 `slug` 为 `zh-CN` 或 `en` 的节点。\n\n现在你可以根据 Static Page Generator 支持的方式自由的实现多语言支持了，每一种具体的工具细节不一样，这里就不细讲了。\n\n### VitePress 配置参考\n\n如果你是采用 VitePress 你可以参考这个配置：\n\nhttps://github.com/longbridgeapp/feishu-pages/blob/main/example-website/.vitepress/config.mts\n\n",
        "meta": {
          "slug": "i18n"
        },
        "fileTokens": {
          "P9tcbRYsgo2fAwx7Y48clxP0nYk": {
            "token": "P9tcbRYsgo2fAwx7Y48clxP0nYk",
            "type": "image"
          }
        },
        "slug": "zh-CN/i18n",
        "position": 3,
        "filename": "zh-CN/i18n.md"
      },
      {
        "depth": 1,
        "title": "静态页面生成",
        "node_token": "OzAYwN3oUi9q6vkzDguce2cCnee",
        "parent_node_token": "PRqjwjB4EiQbiEk5fxVc99BZnzg",
        "obj_create_time": "1693477134",
        "obj_edit_time": "1697445272",
        "obj_token": "SrqHdGgWooFl2CxV9EKc3zSXnQd",
        "children": [
          {
            "depth": 2,
            "title": "VitePress",
            "node_token": "VNNZwWEHTiojJVka343c1lrunsf",
            "parent_node_token": "OzAYwN3oUi9q6vkzDguce2cCnee",
            "obj_create_time": "1693477475",
            "obj_edit_time": "1695608238",
            "obj_token": "P49edp2awoGNEGx2zzmcN8zMnrf",
            "children": [],
            "has_child": false,
            "content": "# VitePress\n\n[VitePress](https://vitepress.dev) 非常适用于生成文档网站，他是由 Vue 社区创立的，很多 Vue 社区的技术文档都用它来生成。\n\n想让 Feishu Pages 与 VitePress，你需要基于 `docs.json` 来构建 VitePress 的 Sidebar。\n\n## 配置\n\n你可以在 VitePress 的配置文件中实现 Sidebar 的生成，请将 `docs.json` 放到 VitePress 文档项目根目录。\n\n然后修改配置 `.vitepress/config.mts`，增加：\n\n```ts\nimport { DefaultTheme, defineConfig } from 'vitepress';\nconst docs = require(\"../docs.json\")\n/**\n * Convert feishu-pages's docs.json into VitePress's sidebar config\n * @param docs from `docs.json`\n * @returns\n */\nconst convertDocsToSidebars = (docs: any) => {\n  const sidebars: DefaultTheme.SidebarItem[] = [];\n  for (const doc of docs) {\n    let sidebar: DefaultTheme.SidebarItem = {\n      text: doc.title,\n      link: doc.slug,\n    };\n    if (doc.children.length > 0) {\n      sidebar.items = convertDocsToSidebars(doc.children);\n    }\n    sidebars.push(sidebar);\n  }\n\n  return sidebars;\n};\n\n\nexport default defineConfig({\n  ignoreDeadLinks: true,\n  themeConfig: {\n    sidebar: convertDocsToSidebars(docs),\n  },\n});\n```\n\n请将 feishu-pages 生成的 `dist` 目录下的 `.md` 文件复制到 VitePress 的 `docs` 目录。\n\n",
            "meta": {
              "slug": "vite-press"
            },
            "fileTokens": {},
            "slug": "zh-CN/static-page/vite-press",
            "position": 0,
            "filename": "zh-CN/static-page/vite-press.md"
          }
        ],
        "has_child": true,
        "content": "# 静态页面生成\n\nFeishu Pages 支持与多种 Static Page Generator 来协作。\n\n<div class=\"callout callout-bg-4 callout-border-4\">\n🐸 通过 Static Page Generator 你可以获得纯静态的文档网站。\n</div>\n\n导出文档的时候，你将会获得下面两个关键文件和一些文件夹：\n\n- `assets` - 存储图片等附件文件\n- `docs` - 存储所有的 Markdown 文件，并根据目录层次已经组织好了。\n- `docs/SUMMARY.md` - 为 GitBook 和 mdBook 等工具准备的目录索引。\n- `docs.json` - JSON 格式的所有文档树。\n\n## 已知可行的方案\n\n- [VitePress](https://vitepress.dev/)\n- [Docusaurus](https://docusaurus.io/)\n- [GitBook](https://www.gitbook.com/)\n- [mdBook](https://rust-lang.github.io/mdBook/)\n\n",
        "meta": {
          "slug": "static-page"
        },
        "fileTokens": {},
        "slug": "zh-CN/static-page",
        "position": 4,
        "filename": "zh-CN/static-page.md"
      },
      {
        "depth": 1,
        "title": "持续集成发布",
        "node_token": "Rd52wbrZ1ifWmXkEUQpcXnf4ntT",
        "parent_node_token": "PRqjwjB4EiQbiEk5fxVc99BZnzg",
        "obj_create_time": "1693470710",
        "obj_edit_time": "1697445283",
        "obj_token": "NxrfdoKbYoLnPkx5IBAcXSRSnXb",
        "children": [
          {
            "depth": 2,
            "title": "GitHub Actions",
            "node_token": "NNU3wGwNeiLbrnk0mmccNngHnLd",
            "parent_node_token": "Rd52wbrZ1ifWmXkEUQpcXnf4ntT",
            "obj_create_time": "1693453057",
            "obj_edit_time": "1695364394",
            "obj_token": "TZqpdSmbuorZXFxIIY5c4J3qnEh",
            "children": [],
            "has_child": false,
            "content": "# GitHub Actions\n\nFeishu Pages 设计就是用来结合 GitHub Actions、GitLab CI 之类的持续集成流程内使用。这样我们可以通过设定周期性、或 Webhook 触发的方式来实现飞书文档变更，同时触发文档自动发布的动作。\n\n## Installation\n\n在你的 GitHub 项目中新增 `.github/workflows/feishu-pages.yml`\n\n```yaml\non:\n  push:\njobs:\n  feishu-pages:\n    name: Feishu Pages Export\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup node\n        env:\n          FEISHU_APP_ID: ${{ secrets.FEISHU_APP_ID }}\n          FEISHU_APP_SECRET: ${{ secrets.FEISHU_APP_SECRET }}\n          FEISHU_SPACE_ID: ${{ secrets.FEISHU_SPACE_ID }}\n        uses: longbridgeapp/feishu-pages@main\n```\n\n",
            "meta": {
              "slug": "github-actions"
            },
            "fileTokens": {},
            "slug": "zh-CN/intergration-deploy/github-actions",
            "position": 0,
            "filename": "zh-CN/intergration-deploy/github-actions.md"
          },
          {
            "depth": 2,
            "title": "GitLab CI",
            "node_token": "OfRKwGCFEizaifkw1upcU0UWnXf",
            "parent_node_token": "Rd52wbrZ1ifWmXkEUQpcXnf4ntT",
            "obj_create_time": "1693472027",
            "obj_edit_time": "1695371974",
            "obj_token": "Gk7sdHrVNo0rHnx1z5rc0Z87nrb",
            "children": [],
            "has_child": false,
            "content": "# GitLab CI\n\nTODO\n\n",
            "meta": {
              "slug": "gitlab-ci"
            },
            "fileTokens": {},
            "slug": "zh-CN/intergration-deploy/gitlab-ci",
            "position": 1,
            "filename": "zh-CN/intergration-deploy/gitlab-ci.md"
          }
        ],
        "has_child": true,
        "content": "# 持续集成发布\n\n",
        "meta": {
          "slug": "intergration-deploy"
        },
        "fileTokens": {},
        "slug": "zh-CN/intergration-deploy",
        "position": 5,
        "filename": "zh-CN/intergration-deploy.md"
      },
      {
        "depth": 1,
        "title": "Feishu Docx",
        "node_token": "WtjPwB0uYi1VwwkOZ4UcWTRon0c",
        "parent_node_token": "PRqjwjB4EiQbiEk5fxVc99BZnzg",
        "obj_create_time": "1693453009",
        "obj_edit_time": "1695364410",
        "obj_token": "BtCmdSsyfolTtzxOyZ6cvfjsnTe",
        "children": [],
        "has_child": false,
        "content": "# Feishu Docx\n\n`feishu-docx` 是一个可以支持将飞书 Docx 文档格式转换为其他任意格式的实现。\n\n这是一个独立的 NPM 库，你可以自由引入到自己的前端项目中使用。\n\n目前支持格式：\n\n- Markdown (GFM)\n\n## **Installation**\n\n```bash\nyarn add feishu-docx\n```\n\n## **Usage**\n\n```ts\nimport { MarkdownRenderer } from 'feishu-docx'\n\n// Load docx JSON from file\nconst docx = fs.readFileSync('test.json')\nconst render = new MarkdownRenderer(docx)\nconst text = render.parse();\nconst imageTokens = render.imageTokens;\n```\n\n## 支持飞书 Block 类型\n\n- Text\n- Heading1\n- Heading2\n- Heading3\n- Heading4\n- Heading5\n- Heading6\n- Heading7\n- Heading8\n- Heading9\n- Bullet\n- Ordered\n- Code\n- Quote\n- TodoList\n- Divider\n- Image\n- Table\n\n## **License**\n\nMIT\n\n",
        "meta": {
          "slug": "feishu-docx"
        },
        "fileTokens": {},
        "slug": "zh-CN/feishu-docx",
        "position": 6,
        "filename": "zh-CN/feishu-docx.md"
      }
    ],
    "has_child": true,
    "content": "# 简体中文\n\n",
    "meta": {
      "slug": "zh-CN"
    },
    "fileTokens": {},
    "slug": "zh-CN",
    "position": 0,
    "filename": "zh-CN.md"
  },
  {
    "depth": 0,
    "title": "English",
    "node_token": "TBslwfQeGiQyNHkiBukcGpQSnWd",
    "parent_node_token": "",
    "obj_create_time": "1697445206",
    "obj_edit_time": "1697445215",
    "obj_token": "HyyhdMwqdoPFfUx2oNPcySsun1c",
    "children": [
      {
        "depth": 1,
        "title": "Getting Started",
        "node_token": "XwtHwhiVbi45WokvzaBcpx9Un3P",
        "parent_node_token": "TBslwfQeGiQyNHkiBukcGpQSnWd",
        "obj_create_time": "1697445234",
        "obj_edit_time": "1697449992",
        "obj_token": "F01nd0Bz8oN0fbxgKh8cbLV3nwv",
        "children": [],
        "has_child": false,
        "content": "# Getting Started\n\n<div class=\"callout callout-bg-4 callout-border-4 callout-color-4\">\n🎉 This site build by GitHub Actions with feishu-pages.\n</div>\n\n<img src=\"IWm9b2knwoJmZzxCVE9cg2mHnzc\" src-width=\"400\" src-height=\"354\" align=\"center\"/>\n\nFeishu Pages is a tool for exporting Feishu Wiki into Markdown files, with [Static Page Generator](https://www.google.com/search?q=Static+Page+Generator) tools to publish the docs as static web pages.\n\nSupport Formats: [Supported Formats](NWEWw9rscidWVbkjmCac43cJnWf) \n\n## **Features**\n\n- [feishu-docx](https://github.com/longbridgeapp/feishu-pages/tree/main/feishu-docx) - Convert feishu docx into Markdown format.\n- Keeping the original sidebar.\n- Download images locally.\n- Working with GitHub Actions and other CI tools.\n- Generate [Docusaurus](https://docusaurus.io/) supported Markdown format, for the sidebar. (based on `sidebar_position`)\n    - For example use VitePress: [VitePress](N7Cvw1mFmi5BbckuPSfcJ96unJd) \n\n## **Installation**\n\nFeishu Pages can install via Npm into your Static Page Generator project.\n\nFor example, if we have a [Docusaurus](https://docusaurus.io/) project.\n\n```bash\ncd your-project/\nyarn add feishu-pages\n```\n\nAnd then you can run `yarn feishu-pages` to export the Feishu docs. This command will export the docs with `.md` files.\n\n## **Feishu Permissions**\n\n- `docx:document:readonly`\n- `wiki:wiki:readonly`\n- `drive:drive:readonly`\n\n## **Configuration**\n\n|Name|Description|Required|Default|\n|---|---|---|---|\n|FEISHU_APP_ID|Feishu App ID|YES||\n|FEISHU_APP_SECRET|Feishu App Secret|YES||\n|FEISHU_SPACE_ID|Feishu Knowledge Base ID|YES||\n|ASSET_BASE_URL|Base URL of resource files (images, attachments), configure the URL prefix of img src through this configuration||/assets|\n|OUTPUT_DIR|Output directory||./dist|\n\n## **Usage**\n\n### **Create Feishu app and grant permissions**\n\n1. Visit [https://open.feishu.cn/app ](https://open.feishu.cn/app)Create a new app and get:\n    - `App ``ID`\n    - `App Secret `- Please take care to keep the App Secret and do not leak it to the Internet.\n\n2. Enable the `robot `application capability for the application.\n3. Enable the `docx: document: readonly `and `wiki: wiki: readonly `permissions for the app.\n4. Release the official version of the application and ensure approval .\n5. Create a new group `Feishu Pages `in Feishu IM, add the application as the group bot, the Knowledge Base administrator adds it in \"Wiki Workspace Settings\" - > \"Permission Settings\" - > \"Add Administrator\", and add this `Feishu Pages `group as an **administrator **.\n    - Otherwise you will encounter `permission denied: wiki space permission denied `error. [ref](https://open.feishu.cn/document/server-docs/docs/wiki-v2/wiki-qa)\n\n### **Get the Feishu Knowledge Base ****space_id**\n\nWe need to configure `FEISHU_SPACE_ID `environment variables, which is the `space_id `of Feishu Knowledge Base. You can access the Knowledge Base settings interface and get them from the URL.\n\nFor example: `https://your-company.feishu.cn/wiki/settings/6992046856314306562 `here `6992046856314306562 `for `space_id `.\n\n### **Environment variables configuration**\n\nFeishu Pages supports `.env `files, if the root directory has a `.env `file, it will be automatically read.\n\n> Please refer `to .env.default `to configure environment variables.\n\nIf you need to use it in the CI process of GitHub Actions, it is recommended to add it to Secrets and get it through environment variables.\n\n## **Exporting Markdown Documents from Knowledge Base**\n\n```bash\ncd your-project/\nyarn feishu-pages\n```\n\nAccording to the default configuration above, Markdown files and exported image files will be generated in the `./dist `directory. If you want to adjust the directory, you can set `OUTPUT_DIR `environment variables yourself.\n\n## **FAQs**\n\n### **Rate Limit Related Errors**\n\n> Error: request trigger frequency limit\n\nThe Feishu API has a [total frequency limit ](https://open.feishu.cn/document/ukTMukTMukTM/uUzN04SN3QjL1cDN)of 100 requests per minute. This project implements a delay of 300ms before each request to avoid exceeding this frequency. If you encounter such problems, please submit an issue.\n\n## **License**\n\nMIT\n\n",
        "meta": {
          "slug": "gettting-started",
          "hide": true
        },
        "fileTokens": {
          "IWm9b2knwoJmZzxCVE9cg2mHnzc": {
            "token": "IWm9b2knwoJmZzxCVE9cg2mHnzc",
            "type": "image"
          }
        },
        "slug": "en/gettting-started",
        "position": 0,
        "filename": "en/gettting-started.md"
      },
      {
        "depth": 1,
        "title": "Supported Formats",
        "node_token": "NWEWw9rscidWVbkjmCac43cJnWf",
        "parent_node_token": "TBslwfQeGiQyNHkiBukcGpQSnWd",
        "obj_create_time": "1697445234",
        "obj_edit_time": "1697449679",
        "obj_token": "THW9dAUKEomjAPx0uM7cDABAnie",
        "children": [],
        "has_child": false,
        "content": "# Supported Formats\n\nThis article is used to demonstrate the formats that feishu-docx can perfectly support after exporting, and the ones listed below can all have good support.\n\nDue to the limited data provided by Feishu OpenAPI , feishu-docx export cannot restore 100% of the format in Feishu Docs, and can actually achieve 99% of the effect.\n\n**Known unsupported formats:**\n\n- Base - Feishu Base (spreadsheet) is independent data, and the data format is large and complex, which is not supported for the time being. Please use **ordinary tables **when writing documents.\n- Flowchart / UML diagram / Drawing board / Mindmap - the above are the sub-application functions of Feishu Docs, and the Feishu Docs currently docked does not provide such data or pictures, so it cannot be realized.\n- Image size, cropping - the image will be output in the original way, because the Feishu OpenAPI does not give the image cropping and scaling size information, so the exported content does not contain width, height, this can be based on the final page setting image 100% width to achieve.\n- Formula - not supported yet, this may be supported later.\n- Other Feishu third-party components - this cannot be supported, API does not provide data.\n- Text color - The foreground color and background color of the text are not supported for the time being due to Markdown output.\n\nBased on the above, it is recommended to use supported formats as much as possible when writing documents on the Feishu side. The formats that are currently supported can meet the document formatting needs of document writing (such as help documents, blogs) and other scenarios.\n\n---\n\n# Here is the full format demonstration\n\n## This is heading 2\n\n### This is heading 3\n\n#### This is heading 4\n\n##### This is heading 5\n\n###### This is heading 6\n\n> This is a block quote.\n> With a new line.\n\n## Paragraph\n\nExport Feishu Knowledge Base and generate [Static Page Generator ](https://www.google.com/search?q=Static+Page+Generator)with the same directory structure supports `Markdown `file organization for publishing as a **static website **.\n\nGenerate **Feishu Wiki** into a Markdown for work with Static Page Generators.\n\n## Callout\n\n<div class=\"callout callout-bg-1 callout-border-1 callout-color-1\">\n Red Callout\n</div>\n\n<div class=\"callout callout-bg-2 callout-border-2 callout-color-2\">\n💡 Orange Callout\n</div>\n\n<div class=\"callout callout-bg-3 callout-border-3 callout-color-3\">\n🤖 Yellow Callout\n</div>\n\n<div class=\"callout callout-bg-4 callout-border-4 callout-color-4\">\n✅ Green Callout\n</div>\n\n<div class=\"callout callout-bg-5 callout-border-5 callout-color-5\">\n🐳 Blue Callout\n</div>\n\n<div class=\"callout callout-bg-6 callout-border-6 callout-color-6\">\n🐳 Purple Callout\n</div>\n\n<div class=\"callout callout-bg-14 callout-border-7 callout-color-7\">\n🐼 Gray Callout\n</div>\n\n## Grid\n\nHere is a 3 column grid example:\n\n<div class=\"grid gap-3 grid-cols-4\">\n<div>\n</div>\n<div>\n</div>\n<div>\n</div>\n<div>\n</div>\n</div>\n\n<div class=\"grid gap-3 grid-cols-3\">\n<div>\n<img src=\"AImzbaiiaohSKjxJ6l5cHcEKnXd\" src-width=\"440\" src-height=\"440\" align=\"center\"/>\n</div>\n<div>\n<img src=\"JdJbbo7jmoeZXrxobtMcX4f8nHg\" src-width=\"440\" src-height=\"440\" align=\"center\"/>\n</div>\n<div>\n<img src=\"KpC3bbs5Qo06hqxvlGfcVLtDn8c\" src-width=\"440\" src-height=\"440\" align=\"center\"/>\n</div>\n</div>\n\n## Bullet List\n\n- Projects\n    - GitHub\n    - Twitter\n        - x.com\n    - Facebook \n\n- OpenSource\n    - feishu-pages\n    - feishu-docx\n\n## Ordered List\n\n1. This is 1 item\n    1. This is a item\n        1. This is i \n    2. This is b\n    3. This c\n\n2. This is 2 item\n    1. This is 2.1\n    2. This is 2.2\n\n## CodeBlock\n\nA JSON example:\n\n```json\n{\n  \"name\": \"feishu-pages\",\n}\n```\n\nA TypeScript example:\n\n```ts\nconst name = \"feishu-pages\";\n```\n\n## TODO\n\n- [x] This item is completed\n\n- [ ] This is imcomplete\n\n## Divider\n\nThere is a divider\n\n---\n\nTo split contents.\n\n## Image\n\nAn example of an image with caption.\n\n<img src=\"G5evbrJKxoizxSxjazlcf6lNntL\" src-width=\"1400\" src-height=\"700\" align=\"center\"/>\n\n## File\n\n[test-file.zip](MO5Ob83I6oe6fVxmgGEchkiTnUc)\n\n## Table\n\nCurrently, feishu-docx only supports pure Table.\n\n|Name|Type|Website|\n|---|---|---|\n|GitHub|Programming|https://github.com|\n|Twitter|Social Network|https://x.com|\n|Dribbble|Design|https://dribbble.com|\n\n",
        "meta": {
          "slug": "supported-formats"
        },
        "fileTokens": {
          "AImzbaiiaohSKjxJ6l5cHcEKnXd": {
            "token": "AImzbaiiaohSKjxJ6l5cHcEKnXd",
            "type": "image"
          },
          "JdJbbo7jmoeZXrxobtMcX4f8nHg": {
            "token": "JdJbbo7jmoeZXrxobtMcX4f8nHg",
            "type": "image"
          },
          "KpC3bbs5Qo06hqxvlGfcVLtDn8c": {
            "token": "KpC3bbs5Qo06hqxvlGfcVLtDn8c",
            "type": "image"
          },
          "G5evbrJKxoizxSxjazlcf6lNntL": {
            "token": "G5evbrJKxoizxSxjazlcf6lNntL",
            "type": "image"
          },
          "MO5Ob83I6oe6fVxmgGEchkiTnUc": {
            "token": "MO5Ob83I6oe6fVxmgGEchkiTnUc",
            "type": "file"
          }
        },
        "slug": "en/supported-formats",
        "position": 1,
        "filename": "en/supported-formats.md"
      },
      {
        "depth": 1,
        "title": "Page Mata",
        "node_token": "Rf4Lw3T1Qix2SCkIFa9ctd5Vnig",
        "parent_node_token": "TBslwfQeGiQyNHkiBukcGpQSnWd",
        "obj_create_time": "1697445234",
        "obj_edit_time": "1697445681",
        "obj_token": "FJCSd2I4boULtBxhU97czwrCnIe",
        "children": [],
        "has_child": false,
        "content": "# Page Mata\n\nBy default, Feishu Wiki did not provide any features that allowed us to specify the page URL.\n\nSo, we need to use a special way to do that.\n\n## Pages Meta\n\nYou can write a `CodeBlock` with `YAML` or `JSON` language at the first of your Feishu Document.\n\n|   |   |   |\n|---|---|---|\n|Field|Type|Description|\n|slug|string|To specify the URL filename of this page.<br/>For example: `hello-world`<br/>Then the page URL will: <br/>`https://your-site.com/path/of/folder/`**hello-world**<br/>> `path/of/folder` is the nested paths by the TOC.|\n|hide|bool|Hide this page, if present `true` this page will ignore and not shown on Sidebar.<br/>Default: `false`|\n\nAfter the page is generated, the Page Meta part will be invisible.\n\n## For example\n\nHere is a screenshot of Page Meta in the Feishu Document. \n\n<img src=\"ABxwbknVxoL2c4xjgrVcMgDWnOh\" src-width=\"1750\" src-height=\"704\" align=\"center\"/>\n\nAdd `YAML` or `JSON` content:\n\n```yaml\nslug: your-page-slug\n```\n\nIf you'd like to use `JSON`, write like this.\n\n```json\n{\n  \"slug\": \"your-page-slug\"\n}\n```\n\nThen this `CodeBlock` will parse to as doc meta info, and this `CodeBlock` will not appear in the output Markdown content.\n\n",
        "meta": {
          "slug": "page-meta"
        },
        "fileTokens": {
          "ABxwbknVxoL2c4xjgrVcMgDWnOh": {
            "token": "ABxwbknVxoL2c4xjgrVcMgDWnOh",
            "type": "image"
          }
        },
        "slug": "en/page-meta",
        "position": 2,
        "filename": "en/page-meta.md"
      },
      {
        "depth": 1,
        "title": "Internationalization",
        "node_token": "MoYZwnnsBiIyDQk0UIOcpx5UnNc",
        "parent_node_token": "TBslwfQeGiQyNHkiBukcGpQSnWd",
        "obj_create_time": "1697449558",
        "obj_edit_time": "1697450313",
        "obj_token": "IJQ1dkGvloSMlBxNQSKcJOIFnof",
        "children": [],
        "has_child": false,
        "content": "# Internationalization\n\nFeishu Docs and Feishu Knowledge Base do not support Internationalization, so we can not add translations in different languages to the same document.\n\nTherefore, we need some special mechanisms to achieve internationalization support for our project in the feishu-pages process.\n\n## Directory structure\n\nYou need to put multiple languages together in the Feishu Knowledge Base and put different languages into different root nodes.\n\nAs needed, create the Internationalization version required in the root directory, such as Simplified Chinese, Traditional Chinese, English, etc., and add [Page Mata](J1o5w2l0NiV8tekJvXycfkkengb)to these files to define the basic slug, and then put the content of different languages under it.\n\nThe directory structure needs to be constructed like this (with Page Meta information in parentheses):\n\n```yaml\n简体中文 (slug: zh-CN)\n    快速开始\n    支持的内容格式\n    ...\nEnglish (slug: en)\n    Getting Started\n    Support Formats\n    ...\n```\n\nThe directory of Feishu Knowledge Base is roughly like this:\n\n<img src=\"LJfFbpQDhoC1IpxBJygch3Dnnkg\" src-width=\"676\" src-height=\"1148\" align=\"center\"/>\n\n## Static Page Generator Configuration\n\nBy using the above method, after exporting the Markdown file from feishu-pages, you will obtain the following file structure:\n\n```yaml\n├── en\n│   ├── assets\n│   │   ├── ABxwbknVxoL2c4xjgrVcMgDWnOh.png\n│   ├── feishu-docx.md\n│   ├── gettting-started.md\n│   ├── intergration-deploy\n│   │   ├── github-actions.md\n│   │   └── gitlab-ci.md\n│   ├── intergration-deploy.md\n│   ├── page-meta.md\n│   ├── static-page\n│   │   └── vite-press.md\n│   ├── static-page.md\n│   └── supported-formats.md\n├── en.md\n├── zh-CN\n│   ├── assets\n│   │   ├── AOilbSy20oC6Wlx8qtUc9ok5nLb.png\n│   ├── feishu-docx.md\n│   ├── gettting-started.md\n│   ├── intergration-deploy\n│   │   ├── github-actions.md\n│   │   └── gitlab-ci.md\n│   ├── intergration-deploy.md\n│   ├── page-meta.md\n│   ├── static-page\n│   │   └── vite-press.md\n│   ├── static-page.md\n│   └── supported-formats.md\n└── zh-CN.md\n```\n\nAs can be seen from the above structure, `zh-CN `and `en `are placed in different files.\n\nAt the same time, the `docs.json `file generated by feishu-pages also has such a directory tree structure. If you want to get `zh-CN `or `en `, you can find the node with `slug `as `zh-CN `or `en `through JavaScript traversal.\n\nNow you can freely implement multi-language support according to the method supported by Static Page Generator. The details of each specific tool are different, so I won't go into detail here.\n\n### VitePress Configuration Reference\n\nIf you are using VitePress, you can refer to this configuration:\n\nhttps://github.com/longbridgeapp/feishu-pages/blob/main/example-website/.vitepress/config.mts\n\n",
        "meta": {
          "slug": "i18n"
        },
        "fileTokens": {
          "LJfFbpQDhoC1IpxBJygch3Dnnkg": {
            "token": "LJfFbpQDhoC1IpxBJygch3Dnnkg",
            "type": "image"
          }
        },
        "slug": "en/i18n",
        "position": 3,
        "filename": "en/i18n.md"
      },
      {
        "depth": 1,
        "title": "Static Page Generator",
        "node_token": "OTbpwgPvziZWOJkK45KcnbWunbh",
        "parent_node_token": "TBslwfQeGiQyNHkiBukcGpQSnWd",
        "obj_create_time": "1697445234",
        "obj_edit_time": "1697449717",
        "obj_token": "It8FdpgUpokfFfxdJGycOBcmnnf",
        "children": [
          {
            "depth": 2,
            "title": "VitePress",
            "node_token": "N7Cvw1mFmi5BbckuPSfcJ96unJd",
            "parent_node_token": "OTbpwgPvziZWOJkK45KcnbWunbh",
            "obj_create_time": "1697445238",
            "obj_edit_time": "1697449742",
            "obj_token": "MYO1d5XUxoQHtQx1b0qcsLwFnze",
            "children": [],
            "has_child": false,
            "content": "# VitePress\n\n[VitePress ](https://vitepress.dev)is very suitable for generating document websites. It was founded by the Vue community, and many technical documents in the Vue community are generated using it.\n\nTo make Feishu Pages work with VitePress, you need to build the VitePress Sidebar based on `docs.json. `\n\n## Configure\n\nYou can generate Sidebar in the VitePress configuration file, please put `docs.json `in the VitePress documentation project root directory.\n\nThen modify `configuration.vitepress/config.mts `and add:\n\n```ts\nimport { DefaultTheme, defineConfig } from 'vitepress';\nconst docs = require(\"../docs.json\")\n/**\n * Convert feishu-pages's docs.json into VitePress's sidebar config\n * @param docs from `docs.json`\n * @returns\n */\nconst convertDocsToSidebars = (docs: any) => {\n  const sidebars: DefaultTheme.SidebarItem[] = [];\n  for (const doc of docs) {\n    let sidebar: DefaultTheme.SidebarItem = {\n      text: doc.title,\n      link: doc.slug,\n    };\n    if (doc.children.length > 0) {\n      sidebar.items = convertDocsToSidebars(doc.children);\n    }\n    sidebars.push(sidebar);\n  }\n\n  return sidebars;\n};\n\n\nexport default defineConfig({\n  ignoreDeadLinks: true,\n  themeConfig: {\n    sidebar: convertDocsToSidebars(docs),\n  },\n});\n```\n\nPlease copy the `.md `file in the `dist `directory generated by feishu-pages to the VitePress `docs `directory.\n\n",
            "meta": {
              "slug": "vite-press"
            },
            "fileTokens": {},
            "slug": "en/static-page/vite-press",
            "position": 0,
            "filename": "en/static-page/vite-press.md"
          }
        ],
        "has_child": true,
        "content": "# Static Page Generator\n\nFeishu Pages supports collaboration with various Static Page Generators.\n\n<div class=\"callout callout-bg-4 callout-border-4\">\n🐸 With the Static Page Generator, you can get a purely static document website.\n</div>\n\nWhen exporting documents, you will get the following two key files and some folders:\n\n- `Assets `- Store attachments such as images\n- `Docs `- stores all Markdown files already organized according to directory hierarchy.\n- `Docs/SUMMARY.md `- Catalog indexes for tools like GitBook and mdBook.\n- `Docs.json `- All document trees in JSON format.\n\n## Known feasible options\n\n- [VitePress](https://vitepress.dev/)\n- [Docusaurus](https://docusaurus.io/)\n- [GitBook](https://www.gitbook.com/)\n- [mdBook](https://rust-lang.github.io/mdBook/)\n\n",
        "meta": {
          "slug": "static-page"
        },
        "fileTokens": {},
        "slug": "en/static-page",
        "position": 4,
        "filename": "en/static-page.md"
      },
      {
        "depth": 1,
        "title": "Integration Deploy",
        "node_token": "JWuYwCeCNi8hSmkc44dcc5Ffnlf",
        "parent_node_token": "TBslwfQeGiQyNHkiBukcGpQSnWd",
        "obj_create_time": "1697445234",
        "obj_edit_time": "1697445234",
        "obj_token": "SczfdSRFAoyKibx7y0scWzTgnbc",
        "children": [
          {
            "depth": 2,
            "title": "GitHub Actions",
            "node_token": "V9DDw02FyiJjGpklHrucCrJHnph",
            "parent_node_token": "JWuYwCeCNi8hSmkc44dcc5Ffnlf",
            "obj_create_time": "1697445242",
            "obj_edit_time": "1697449773",
            "obj_token": "BKZdd0LtVo3uIOxpsaNcZOvSnnf",
            "children": [],
            "has_child": false,
            "content": "# GitHub Actions\n\nFeishu Pages is designed to be used in conjunction with continuous integration processes such as GitHub Actions and GitLab CI. This way, we can achieve Feishu Docs changes by setting up periodicity or Webhook triggering, and trigger the action of document automatic publication.\n\n## Installation\n\nAdd to your GitHub project `.github/workflows/feishu-pages.yml`\n\n```yaml\non:\n  push:\njobs:\n  feishu-pages:\n    name: Feishu Pages Export\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup node\n        env:\n          FEISHU_APP_ID: ${{ secrets.FEISHU_APP_ID }}\n          FEISHU_APP_SECRET: ${{ secrets.FEISHU_APP_SECRET }}\n          FEISHU_SPACE_ID: ${{ secrets.FEISHU_SPACE_ID }}\n        uses: longbridgeapp/feishu-pages@main\n```\n\n",
            "meta": {
              "slug": "github-actions"
            },
            "fileTokens": {},
            "slug": "en/intergration-deploy/github-actions",
            "position": 0,
            "filename": "en/intergration-deploy/github-actions.md"
          },
          {
            "depth": 2,
            "title": "GitLab CI",
            "node_token": "SxsmwWi0LiJQT0kHXmRczh2onAb",
            "parent_node_token": "JWuYwCeCNi8hSmkc44dcc5Ffnlf",
            "obj_create_time": "1697445242",
            "obj_edit_time": "1697445242",
            "obj_token": "DcXvdBvpWoVGBux5rI1c9Qjwn6g",
            "children": [],
            "has_child": false,
            "content": "# GitLab CI\n\nTODO\n\n",
            "meta": {
              "slug": "gitlab-ci"
            },
            "fileTokens": {},
            "slug": "en/intergration-deploy/gitlab-ci",
            "position": 1,
            "filename": "en/intergration-deploy/gitlab-ci.md"
          }
        ],
        "has_child": true,
        "content": "# Integration Deploy\n\n",
        "meta": {
          "slug": "intergration-deploy"
        },
        "fileTokens": {},
        "slug": "en/intergration-deploy",
        "position": 5,
        "filename": "en/intergration-deploy.md"
      },
      {
        "depth": 1,
        "title": "Feishu Docx",
        "node_token": "X80QwaYvjiMWZrk399YcK4q8nCc",
        "parent_node_token": "TBslwfQeGiQyNHkiBukcGpQSnWd",
        "obj_create_time": "1697445234",
        "obj_edit_time": "1697449794",
        "obj_token": "RitUdT5bkoG6fCx3ZSpc5q2AnMe",
        "children": [],
        "has_child": false,
        "content": "# Feishu Docx\n\n`Feishu-docx `is an implementation that supports converting the Feishu Docx document format to any other format.\n\nThis is an independent NPM library that you can freely import and use in your own front-end projects.\n\nCurrently supported formats:\n\n- Markdown (GFM)\n\n## **Installation**\n\n```bash\nyarn add feishu-docx\n```\n\n## **Usage**\n\n```ts\nimport { MarkdownRenderer } from 'feishu-docx'\n\n// Load docx JSON from file\nconst docx = fs.readFileSync('test.json')\nconst render = new MarkdownRenderer(docx)\nconst text = render.parse();\nconst imageTokens = render.imageTokens;\n```\n\n## Feishu Block Type\n\n- Text\n- Heading1\n- Heading2\n- Heading3\n- Heading4\n- Heading5\n- Heading6\n- Heading7\n- Heading8\n- Heading9\n- Bullet\n- Ordered\n- Code\n- Quote\n- TodoList\n- Divider\n- Image\n- Table\n\n## **License**\n\nMIT\n\n",
        "meta": {
          "slug": "feishu-docx"
        },
        "fileTokens": {},
        "slug": "en/feishu-docx",
        "position": 6,
        "filename": "en/feishu-docx.md"
      }
    ],
    "has_child": true,
    "content": "# English\n\n",
    "meta": {
      "slug": "en"
    },
    "fileTokens": {},
    "slug": "en",
    "position": 1,
    "filename": "en.md"
  }
]